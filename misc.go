// Code generated by jsonschema. DO NOT EDIT.
package beerjson

import "encoding/json"

// ID: https://raw.githubusercontent.com/beerjson/beerjson/master/json/misc.json

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe.
type MiscellaneousAdditionType struct {
	Name     *string `json:"name,omitempty"`
	Producer *string `json:"producer,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing                *TimingType                     `json:"timing,omitempty"`
	Amount                MiscellaneousAdditionTypeAmount `json:"amount,omitempty", validate:"oneof"`
	ProductId             *string                         `json:"product_id,omitempty"`
	MiscellaneousBaseType *MiscellaneousBaseType          `json:"type,omitempty"`
}

func (s *MiscellaneousAdditionType) UnmarshalJSON(b []byte) error {
	m := map[string]json.RawMessage{}
	if err := json.Unmarshal(b, &m); err != nil {
		return nil
	}

	miscellaneousAdditionTypeAmount := func() MiscellaneousAdditionTypeAmount {
		raw, ok := m["amount"]
		if !ok {
			return nil
		}

		var volumeType VolumeType
		if err := json.Unmarshal(raw, &volumeType); err == nil {
			return &volumeType
		}

		var massType MassType
		if err := json.Unmarshal(raw, &massType); err == nil {
			return &massType
		}

		var unitType UnitType
		if err := json.Unmarshal(raw, &unitType); err == nil {
			return &unitType
		}

		return nil
	}
	type Alias MiscellaneousAdditionType
	aux := &struct {
		Amount MiscellaneousAdditionTypeAmount `json:"amount,omitempty", validate:"oneof"`
		*Alias
	}{
		Amount: miscellaneousAdditionTypeAmount(),
		Alias:  (*Alias)(s),
	}

	if err := json.Unmarshal(b, &aux); err != nil {
		return err
	}

	s.Amount = aux.Amount

	return nil
}

// MiscellaneousAdditionTypeAmount
type MiscellaneousAdditionTypeAmount interface {
	MiscellaneousAdditionTypeamount()
}

// MiscellaneousBase provides unique properties to identify individual records of ingredients that are neither hops, nor provide a contribution to the gravity of wort.
type MiscellaneousBase struct {
	Name                  string                `json:"name", validate:"required"`
	Producer              *string               `json:"producer,omitempty"`
	ProductId             *string               `json:"product_id,omitempty"`
	MiscellaneousBaseType MiscellaneousBaseType `json:"type", validate:"required"`
}

type MiscellaneousBaseType string

const (
	MiscellaneousBaseType_Spice      MiscellaneousBaseType = "spice"
	MiscellaneousBaseType_Fining     MiscellaneousBaseType = "fining"
	MiscellaneousBaseType_WaterAgent MiscellaneousBaseType = "water agent"
	MiscellaneousBaseType_Herb       MiscellaneousBaseType = "herb"
	MiscellaneousBaseType_Flavor     MiscellaneousBaseType = "flavor"
	MiscellaneousBaseType_Wood       MiscellaneousBaseType = "wood"
	MiscellaneousBaseType_Other      MiscellaneousBaseType = "other"
)

type MiscellaneousInventoryType struct {
	Amount MiscellaneousInventoryTypeAmount `json:"amount", validate:"required,oneof"`
}

func (s *MiscellaneousInventoryType) UnmarshalJSON(b []byte) error {
	m := map[string]json.RawMessage{}
	if err := json.Unmarshal(b, &m); err != nil {
		return nil
	}

	miscellaneousInventoryTypeAmount := func() MiscellaneousInventoryTypeAmount {
		raw, ok := m["amount"]
		if !ok {
			return nil
		}

		var volumeType VolumeType
		if err := json.Unmarshal(raw, &volumeType); err == nil {
			return &volumeType
		}

		var massType MassType
		if err := json.Unmarshal(raw, &massType); err == nil {
			return &massType
		}

		var unitType UnitType
		if err := json.Unmarshal(raw, &unitType); err == nil {
			return &unitType
		}

		return nil
	}
	type Alias MiscellaneousInventoryType
	aux := &struct {
		Amount MiscellaneousInventoryTypeAmount `json:"amount", validate:"required,oneof"`
		*Alias
	}{
		Amount: miscellaneousInventoryTypeAmount(),
		Alias:  (*Alias)(s),
	}

	if err := json.Unmarshal(b, &aux); err != nil {
		return err
	}

	s.Amount = aux.Amount

	return nil
}

// MiscellaneousInventoryTypeAmount
type MiscellaneousInventoryTypeAmount interface {
	MiscellaneousInventoryTypeamount()
}

// MiscellaneousType collects the attributes of an ingredient to store as record information.
type MiscellaneousType struct {
	// Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
	UseFor                *string                     `json:"use_for,omitempty"`
	Notes                 *string                     `json:"notes,omitempty"`
	Name                  *string                     `json:"name,omitempty"`
	Producer              *string                     `json:"producer,omitempty"`
	ProductId             *string                     `json:"product_id,omitempty"`
	MiscellaneousBaseType *MiscellaneousBaseType      `json:"type,omitempty"`
	Inventory             *MiscellaneousInventoryType `json:"inventory,omitempty"`
}
