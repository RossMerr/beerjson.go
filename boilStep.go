// Code generated by jsonschema. DO NOT EDIT.
package beerjson

import "encoding/json"
import "fmt"

// ID: https://raw.githubusercontent.com/beerjson/beerjson/master/json/boil_step.json

// BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling.
type BoilStepType struct {
	BoilStepTypeChillingType *BoilStepTypeChillingType `json:"chilling_type,omitempty"`
	Name                     string                    `json:"name", validate:"required"`
	Description              *string                   `json:"description,omitempty"`
	EndTemperature           *TemperatureType          `json:"end_temperature,omitempty"`
	StartGravity             *GravityType              `json:"start_gravity,omitempty"`
	StartPh                  *AcidityType              `json:"start_ph,omitempty"`
	EndPh                    *AcidityType              `json:"end_ph,omitempty"`
	StartTemperature         *TemperatureType          `json:"start_temperature,omitempty"`
	// The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
	RampTime   *TimeType    `json:"ramp_time,omitempty"`
	StepTime   *TimeType    `json:"step_time,omitempty"`
	EndGravity *GravityType `json:"end_gravity,omitempty"`
}

// Chilling type seperates batch chilling, eg immersion chillers, where the entire volume of wort is brought down in temperture as a whole, vs inline chilling where the wort is chilled while it is being drained, which can leave a significant amount of hop isomerization occuring in the boil kettle.
type BoilStepTypeChillingType string

func (s *BoilStepTypeChillingType) UnmarshalJSON(b []byte) error {
	var v string
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	*s = BoilStepTypeChillingType(v)

	switch *s {
	case BoilStepTypeChillingType_Batch:
		return nil
	case BoilStepTypeChillingType_Inline:
		return nil
	}
	return fmt.Errorf("BoilStepTypeChillingType: value '%v' does not match any value", v)
}

const (
	BoilStepTypeChillingType_Batch  BoilStepTypeChillingType = "batch"
	BoilStepTypeChillingType_Inline BoilStepTypeChillingType = "inline"
)
