// Code generated by jsonschema. DO NOT EDIT.
package beerjson

// ID: https://raw.githubusercontent.com/beerjson/beerjson/master/json/measureable_units.json

type AcidityType struct {
	Unit  AcidityUnitType `json:"unit", validate:"required"`
	Value float64         `json:"value", validate:"required"`
}

type AcidityUnitType string

const (
	AcidityUnitType_PH AcidityUnitType = "pH"
)

type BitternessRangeType struct {
	Maximum BitternessType `json:"maximum", validate:"required"`
	Minimum BitternessType `json:"minimum", validate:"required"`
}

type BitternessType struct {
	Unit  BitternessUnitType `json:"unit", validate:"required"`
	Value float64            `json:"value", validate:"required"`
}

type BitternessUnitType string

const (
	BitternessUnitType_IBUs BitternessUnitType = "IBUs"
)

type CarbonationRangeType struct {
	Minimum CarbonationType `json:"minimum", validate:"required"`
	Maximum CarbonationType `json:"maximum", validate:"required"`
}

type CarbonationType struct {
	Unit  CarbonationUnitType `json:"unit", validate:"required"`
	Value float64             `json:"value", validate:"required"`
}

type CarbonationUnitType string

const (
	CarbonationUnitType_Vols CarbonationUnitType = "vols"
)

type ColorRangeType struct {
	Minimum ColorType `json:"minimum", validate:"required"`
	Maximum ColorType `json:"maximum", validate:"required"`
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC.
type ColorType struct {
	Unit  ColorUnitType `json:"unit", validate:"required"`
	Value float64       `json:"value", validate:"required"`
}

type ColorUnitType string

const (
	ColorUnitType_EBC  ColorUnitType = "EBC"
	ColorUnitType_Lovi ColorUnitType = "Lovi"
	ColorUnitType_SRM  ColorUnitType = "SRM"
)

// Examples for concentration include ppm, ppb, and mg/l.
type ConcentrationType struct {
	Unit  ConcentrationUnitType `json:"unit", validate:"required"`
	Value float64               `json:"value", validate:"required"`
}

type ConcentrationUnitType string

const (
	ConcentrationUnitType_Ppm ConcentrationUnitType = "ppm"
	ConcentrationUnitType_Ppb ConcentrationUnitType = "ppb"
	ConcentrationUnitType_MgL ConcentrationUnitType = "mg/l"
)

type DateType string
type DensityUnitType string

const (
	DensityUnitType_Sg    DensityUnitType = "sg"
	DensityUnitType_Plato DensityUnitType = "plato"
	DensityUnitType_Brix  DensityUnitType = "brix"
)

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts.
type DiastaticPowerType struct {
	Value float64                `json:"value", validate:"required"`
	Unit  DiastaticPowerUnitType `json:"unit", validate:"required"`
}

type DiastaticPowerUnitType string

const (
	DiastaticPowerUnitType_Lintner DiastaticPowerUnitType = "Lintner"
	DiastaticPowerUnitType_WK      DiastaticPowerUnitType = "WK"
)

type GravityRangeType struct {
	Minimum GravityType `json:"minimum", validate:"required"`
	Maximum GravityType `json:"maximum", validate:"required"`
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity.
type GravityType struct {
	Value float64         `json:"value", validate:"required"`
	Unit  GravityUnitType `json:"unit", validate:"required"`
}

type GravityUnitType string

const (
	GravityUnitType_Sg    GravityUnitType = "sg"
	GravityUnitType_Plato GravityUnitType = "plato"
	GravityUnitType_Brix  GravityUnitType = "brix"
)

type MassType struct {
	Unit  MassUnitType `json:"unit", validate:"required"`
	Value float64      `json:"value", validate:"required"`
}

func (s *MassType) CultureAdditionTypeamount() {}

func (s *MassType) MiscellaneousAdditionTypeamount() {}

func (s *MassType) MiscellaneousInventoryTypeamount() {}

func (s *MassType) HopAdditionTypeamount() {}

func (s *MassType) HopInventoryTypeamount() {}

func (s *MassType) FermentableAdditionTypeamount() {}

func (s *MassType) FermentableInventoryTypeamount() {}

type MassUnitType string

const (
	MassUnitType_Mg MassUnitType = "mg"
	MassUnitType_G  MassUnitType = "g"
	MassUnitType_Kg MassUnitType = "kg"
	MassUnitType_Lb MassUnitType = "lb"
	MassUnitType_Oz MassUnitType = "oz"
)

type PercentRangeType struct {
	Minimum PercentType `json:"minimum", validate:"required"`
	Maximum PercentType `json:"maximum", validate:"required"`
}

type PercentType struct {
	Unit  PercentUnitType `json:"unit", validate:"required"`
	Value float64         `json:"value", validate:"required"`
}

type PercentUnitType string

const (
	PercentUnitType_No PercentUnitType = "%"
)

type PressureType struct {
	Unit  PressureUnitType `json:"unit", validate:"required"`
	Value float64          `json:"value", validate:"required"`
}

type PressureUnitType string

const (
	PressureUnitType_KPa PressureUnitType = "kPa"
	PressureUnitType_Psi PressureUnitType = "psi"
	PressureUnitType_Bar PressureUnitType = "bar"
)

type QualitativeRangeType string

const (
	QualitativeRangeType_VeryLow    QualitativeRangeType = "very low"
	QualitativeRangeType_Low        QualitativeRangeType = "low"
	QualitativeRangeType_MediumLow  QualitativeRangeType = "medium low"
	QualitativeRangeType_Medium     QualitativeRangeType = "medium"
	QualitativeRangeType_MediumHigh QualitativeRangeType = "medium high"
	QualitativeRangeType_High       QualitativeRangeType = "high"
	QualitativeRangeType_VeryHigh   QualitativeRangeType = "very high"
)

// Specific heat is the measurement of the amount of heat required to raise a given mass one degree..
type SpecificHeatType struct {
	Unit  SpecificHeatUnitType `json:"unit", validate:"required"`
	Value float64              `json:"value", validate:"required"`
}

type SpecificHeatUnitType string

const (
	SpecificHeatUnitType_CalGC  SpecificHeatUnitType = "Cal/(g C)"
	SpecificHeatUnitType_JKgK   SpecificHeatUnitType = "J/(kg K)"
	SpecificHeatUnitType_BTULbF SpecificHeatUnitType = "BTU/(lb F)"
)

// Specific volume is the inverse of density, with units of volume over mass, ie qt/lb or L/kg. Commonly used for mash thickness.
type SpecificVolumeType struct {
	Unit  SpecificVolumeUnitType `json:"unit", validate:"required"`
	Value float64                `json:"value", validate:"required"`
}

type SpecificVolumeUnitType string

const (
	SpecificVolumeUnitType_QtLb   SpecificVolumeUnitType = "qt/lb"
	SpecificVolumeUnitType_GalLb  SpecificVolumeUnitType = "gal/lb"
	SpecificVolumeUnitType_GalOz  SpecificVolumeUnitType = "gal/oz"
	SpecificVolumeUnitType_LG     SpecificVolumeUnitType = "l/g"
	SpecificVolumeUnitType_LKg    SpecificVolumeUnitType = "l/kg"
	SpecificVolumeUnitType_FlozOz SpecificVolumeUnitType = "floz/oz"
	SpecificVolumeUnitType_M3Kg   SpecificVolumeUnitType = "m^3/kg"
	SpecificVolumeUnitType_Ft3Lb  SpecificVolumeUnitType = "ft^3/lb"
)

type TemperatureRangeType struct {
	Minimum TemperatureType `json:"minimum", validate:"required"`
	Maximum TemperatureType `json:"maximum", validate:"required"`
}

type TemperatureType struct {
	Unit  TemperatureUnitType `json:"unit", validate:"required"`
	Value float64             `json:"value", validate:"required"`
}

type TemperatureUnitType string

const (
	TemperatureUnitType_C TemperatureUnitType = "C"
	TemperatureUnitType_F TemperatureUnitType = "F"
)

type TimeType struct {
	Unit  TimeUnitType `json:"unit", validate:"required"`
	Value float64      `json:"value", validate:"required"`
}

type TimeUnitType string

const (
	TimeUnitType_Sec   TimeUnitType = "sec"
	TimeUnitType_Min   TimeUnitType = "min"
	TimeUnitType_Hr    TimeUnitType = "hr"
	TimeUnitType_Day   TimeUnitType = "day"
	TimeUnitType_Week  TimeUnitType = "week"
	TimeUnitType_Month TimeUnitType = "month"
	TimeUnitType_Year  TimeUnitType = "year"
)

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet.
type UnitType struct {
	Unit  UnitUnitType `json:"unit", validate:"required"`
	Value float64      `json:"value", validate:"required"`
}

func (s *UnitType) CultureAdditionTypeamount() {}

func (s *UnitType) MiscellaneousAdditionTypeamount() {}

func (s *UnitType) MiscellaneousInventoryTypeamount() {}

type UnitUnitType string

const (
	UnitUnitType_No1           UnitUnitType = "1"
	UnitUnitType_Unit          UnitUnitType = "unit"
	UnitUnitType_Each          UnitUnitType = "each"
	UnitUnitType_Dimensionless UnitUnitType = "dimensionless"
	UnitUnitType_Pkg           UnitUnitType = "pkg"
)

type VersionType float64
type VolumeType struct {
	Unit  VolumeUnitType `json:"unit", validate:"required"`
	Value float64        `json:"value", validate:"required"`
}

func (s *VolumeType) CultureAdditionTypeamount() {}

func (s *VolumeType) MiscellaneousAdditionTypeamount() {}

func (s *VolumeType) MiscellaneousInventoryTypeamount() {}

func (s *VolumeType) HopAdditionTypeamount() {}

func (s *VolumeType) HopInventoryTypeamount() {}

func (s *VolumeType) FermentableAdditionTypeamount() {}

func (s *VolumeType) FermentableInventoryTypeamount() {}

type VolumeUnitType string

const (
	VolumeUnitType_Ml    VolumeUnitType = "ml"
	VolumeUnitType_L     VolumeUnitType = "l"
	VolumeUnitType_Tsp   VolumeUnitType = "tsp"
	VolumeUnitType_Tbsp  VolumeUnitType = "tbsp"
	VolumeUnitType_Floz  VolumeUnitType = "floz"
	VolumeUnitType_Cup   VolumeUnitType = "cup"
	VolumeUnitType_Pt    VolumeUnitType = "pt"
	VolumeUnitType_Qt    VolumeUnitType = "qt"
	VolumeUnitType_Gal   VolumeUnitType = "gal"
	VolumeUnitType_Bbl   VolumeUnitType = "bbl"
	VolumeUnitType_Ifloz VolumeUnitType = "ifloz"
	VolumeUnitType_Ipt   VolumeUnitType = "ipt"
	VolumeUnitType_Iqt   VolumeUnitType = "iqt"
	VolumeUnitType_Igal  VolumeUnitType = "igal"
	VolumeUnitType_Ibbl  VolumeUnitType = "ibbl"
)
